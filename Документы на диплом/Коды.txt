public async Task<IActionResult> Register([FromBody] RegisterForm register)
{
	try
	{
		if (await db.Users.FirstOrDefaultAsync(u => u.Email == register.Email) != null) return Conflict(new { message = "Этот email уже используется." });

        register.Password = HashService.ComputeHash(register.Password);

		await db.Users.AddAsync(new User(register));
	    await db.SaveChangesAsync();

        return Ok(new { token = TokenSevice.GenerateToken(register.Email, UserRole.User) });
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}



public async Task<IActionResult> Login([FromBody] LoginForm login)
{
	try
	{
        User user = await db.Users.FirstOrDefaultAsync(u => u.Email == login.Email);
		return user != null && HashService.VerifyHash(login.Password, user.Password) ? Ok(new { token = TokenSevice.GenerateToken(login.Email, user.Role) }) : Unauthorized();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}





public async Task<IActionResult> GetTours([FromQuery] int? hotelId)
{
	try
	{
		List<Route> routes = await db.Routes
			.Include(r => r.Tour)
			.ThenInclude(t => t.Hotel)
			.ThenInclude(h => h.City)
			.ThenInclude(c => c.Country)
			.Include(r => r.Tour)
			.ThenInclude(t => t.TourType)
			.OrderBy(r => r.SeatsNumber)
			.ToListAsync();

		if(hotelId != 0 && hotelId != null) routes = routes.Where(r => r.Tour.HotelId == hotelId).ToList();

		return Ok(routes.Select(t => new TourCardDto
		{
			...
		}));
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}




public async Task<IActionResult> GetHotels()
{
	try
	{
		List<Hotel> hotels = await db.Hotels
			.Include(h => h.City)
			.ThenInclude(c => c.Country)
			.ToListAsync();

		return Ok(hotels.Select(h=> new HotelForEditCardDto()
		{
			...
			Id = h.Id,
			Name = h.Name,
			City = h.City.Name,
			Country = h.City.Country.Name,
			Address = h.Address,
			StarsNumber = h.StarsNumber,
			PhotoUrl = $"https://localhost:7276/uploads/hotels/{h.Name}/0.jpg"
		}));
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}





public async Task<IActionResult> GetCountries([FromQuery] int? regionId)
{
	try
	{
		if (regionId == null || regionId == 0)
		{
            List<Models.Entity.Country> countries = await db.Countries.ToListAsync();

			return Ok(countries.Select(c => new GeographicObjectDto
			{
				Id = c.Id,
				Name = c.Name,
				ImageUrl = $"https://localhost:7276/{c.PathToFlag}",
			}));
		}

        List<Models.Entity.Country> filteredCountries = await db.Countries
			.Where(c => c.RegionId == regionId)
			.ToListAsync();

		return Ok(filteredCountries.Select(c => new GeographicObjectDto
		{
			Id = c.Id,
			Name = c.Name,
			ImageUrl = $"https://localhost:7276/{c.PathToFlag}",
		}));
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}






public async Task<IActionResult> GetFiltredTours([FromBody] FilterForm filter)
{
	try
	{

		List<Route> routes = await db.Routes
			.Include(r => r.DepartmentDeparture)
			.Include(r => r.Tour)
			.ThenInclude(t => t.Hotel)
			.ThenInclude(h => h.RoomTypes)
			.Include(r => r.Tour)
			.ThenInclude(t => t.Hotel)
			.ThenInclude(h => h.City)
			.ThenInclude(c => c.Country)
			.Include(r => r.Tour)
			.ThenInclude(t => t.Characteristics)
			.Include(r => r.Tour)
			.ThenInclude(t => t.TourType)
			.OrderBy(r => r.SeatsNumber)
			.ToListAsync();


		

		return Ok(filterTours(filter, routes););
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}





public async Task<IActionResult> GetToursBySurvey([FromBody]AnswersForSurveyForm answersForSurvey)
{
	try
	{
		List<Route> routes = await db.Routes
			.Include(r => r.Tour)
			.ThenInclude(t => t.Hotel)
			.ThenInclude(h => h.City)
			.ThenInclude(c => c.Country)
			.Include(r => r.Tour)
			.ThenInclude(t => t.TourType)
			.OrderBy(r => r.SeatsNumber)
			.Include(r => r.Tour)
			.ThenInclude(t => t.Characteristics)
			.ToListAsync();

		

		return Ok(rGetResultOfSurvey(routes, answersForSurvey));
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}






public async Task<IActionResult> GetToursByPromptToAi([FromBody] PromptForm prompt)
{
	try
	{
		var resultFromAi = await _aiService.ConvertPromptToQuery(prompt.text);
		string[] cities = resultFromAi.Split(", ");

		List<Route> routes = await db.Routes
			.Include(r => r.Tour)
			.ThenInclude(t => t.Hotel)
			.ThenInclude(h => h.City)
			.ThenInclude(c => c.Country)
			.Include(r => r.Tour)
			.ThenInclude(t => t.TourType)
			.OrderBy(r => r.SeatsNumber)
			.Include(r => r.Tour)
			.ThenInclude(t => t.Characteristics)
			.Where(t => cities.Contains(t.Tour.Hotel.City.Name))
			.ToListAsync();

		return Ok(routes.Select(t => new TourCardDto
		{
			Id = t.Tour.Id,
			RouteId = t.Id,
			Name = t.Tour.Name,
			Country = t.Tour.Hotel.City.Country.Name,
			City = t.Tour.Hotel.City.Name,
			PhotoUrl = $"https://localhost:7276/uploads/tours/{t.Tour.Id}/0.jpg",
			TourTypeImageUrl = $"https://localhost:7276/{t.Tour.TourType.PathToImage}",
			DateOfDeparture = ((DateTime)t.LandingDateAndTimeOfDeparture).ToString("dd.MM.yyyy"),
			DateOfReturn = ((DateTime)t.ArrivalDateAndTimeOfReturn).ToString("dd.MM.yyyy"),
			StarsNumber = t.Tour.Hotel.StarsNumber,
			Price = t.Price,
		}));
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}





public async Task<IActionResult> AddReview([FromBody] ReviewForm review)
{
	try
	{
		if (review == null) return BadRequest();

		await db.Reviews.AddAsync(new Review() { TourId = review.TourId, UserId = review.UserId, ReviewText = review.ReviewText });
		await db.SaveChangesAsync();
		return Ok();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}






public async Task<IActionResult> AddBooking([FromBody] RequestForBookingForm requestForBooking)
{
	try
	{
		Booking booking = await db.Bookings.FirstOrDefaultAsync(b => b.UserId == requestForBooking.UserId && b.RouteId == requestForBooking.RouteId);
		if (booking != null) return Conflict(new { message = "Вы уже заказали данный тур." });

		Route route = await db.Routes.FirstOrDefaultAsync(r => r.Id == requestForBooking.RouteId);
		if (route == null) return BadRequest();

		User user = await db.Users.FirstOrDefaultAsync(r => r.Id == requestForBooking.UserId);
		if (user == null) return Unauthorized();

		int remainingSeatsNumber = (int)route.SeatsNumber - (int)requestForBooking.OrderSeatsNumber;

		if (remainingSeatsNumber >= 0)
		{
			CreateNewBooking(requestForBooking);
		}
		else return Conflict(new { message = "Недостаточно мест." });
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}






public IActionResult CreatePaymentIntent([FromBody] PaymentIntentRequest request)
{
	try
	{
		var paymentIntent = _paymentService.CreatePaymentIntent(request.Amount, request.Currency, request.PaymentMethodTypes);

		return Ok(new PaymentResponse()
		{
			clientSecret = paymentIntent.ClientSecret,
		});
	}
	catch (Exception error)
	{
		return BadRequest(new PaymentResponse()
		{
			error = error.Message,
		});
	}
}






public async Task<IActionResult> GetBookings([FromQuery] int? userId, [FromQuery] bool isHistory = false)
{
	try
	{
		List<Booking> bookings = await db.Bookings
			.Where(b => b.UserId == userId)
			.Include(b => b.Route)
			.ThenInclude(r => r.Tour)
			.ThenInclude(t => t.Hotel)
			.ThenInclude(h => h.City)
			.ThenInclude(c => c.Country)
			//.Where(b => isHistory ? b.Route.LandingDateAndTimeOfDeparture < DateTime.Now && b.Status == 2 : b.Route.LandingDateAndTimeOfDeparture >= DateTime.Now)
			.ToListAsync();

		foreach (Booking booking in bookings)
		{
			booking.Route.DepartmentDeparture = await db.DepartmentDepartures
				.Include(dd => dd.City)
				.ThenInclude(c => c.Country)
				.FirstOrDefaultAsync(dd => dd.Id == booking.Route.DepartmentDepartureId);
		}

		return Ok(bookings.Select(b => new BookingCardDto()
		{
			Id = b.Id,
			TourName = b.Route.Tour.Name,
			TourId = b.Route.Tour.Id,
			RouteId = b.Route.Id,
			TourPhotoUrl = $"https://localhost:7276/uploads/tours/{b.Route.Tour.Id}/0.jpg",
			LandingDateAndTimeOfDeparture = b.Route.LandingDateAndTimeOfDeparture?.ToString("dd.MM.yyyy, HH:mm"),
			ArrivalDateAndTimeOfDeparture = b.Route.ArrivalDateAndTimeOfDeparture?.ToString("dd.MM.yyyy, HH:mm"),
			LandingDateAndTimeOfReturn = b.Route.LandingDateAndTimeOfReturn?.ToString("dd.MM.yyyy, HH:mm"),
			ArrivalDateAndTimeOfReturn = b.Route.ArrivalDateAndTimeOfReturn?.ToString("dd.MM.yyyy, HH:mm"),
	
			Price = b.Price,
			OrderSeatsNumber = b.OrderSeatsNumber,
			Status = b.Status,
			Direction = new DirectionDto()
			{
				Hotel = b.Route.Tour.Hotel.Name,
				StarsNumber = b.Route.Tour.Hotel.StarsNumber,
				City = b.Route.Tour.Hotel.City.Name,
				Country = b.Route.Tour.Hotel.City.Country.Name,
			},
			DepartmentDeparture = new DepartmentDepartureDto()
			{
				Name = b.Route.DepartmentDeparture.Name,
				City = b.Route.DepartmentDeparture.City.Name,
				Country = b.Route.DepartmentDeparture.City.Country.Name,
			}
		}));
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}







public async Task<IActionResult> DeleteBooking([FromQuery] int? bookingId)
{
	try
	{
		using (var transaction = await db.Database.BeginTransactionAsync())
		{
			try
			{
				Booking removedBooking = await db.Bookings.Include(b => b.BookedRoomTypes).FirstOrDefaultAsync(b => b.Id == bookingId);
				if (removedBooking == null) return NotFound();


				
				db.BookedRoomTypes.RemoveRange(removedBooking.BookedRoomTypes);
				db.Bookings.Remove(removedBooking); 
				await db.SaveChangesAsync();
				

				await transaction.CommitAsync();
				return Ok();
			}
			catch
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}





public async Task<IActionResult> EditUser([FromForm] UserForm user)
{
	try
	{
		User editUser = await db.Users.FirstOrDefaultAsync(u => u.Id == user.Id);
		if (editUser == null) return NotFound();

		editUser.Name = user.Name;
		editUser.Surname = user.Surname;
		editUser.PhoneNumber = user.PhoneNumber;
		if (user.PhotoFile != null) 
		{
			string uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "users");
			if (!Directory.Exists(uploadsFolder)) Directory.CreateDirectory(uploadsFolder);

			if (user.PhotoFile.Length > 0)
			{
				string filePath = Path.Combine(uploadsFolder, $"{user.Id}.png");
				using var fileStream = new FileStream(filePath, FileMode.Create);
				await user.PhotoFile.CopyToAsync(fileStream);
			}
		}

		await db.SaveChangesAsync();
		return Ok();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}






public async Task<IActionResult> AddTour([FromForm] TourForm tour)
{
	try
	{
		if (tour.Id == 0)
		{
			using (var transaction = await db.Database.BeginTransactionAsync())
			{
				try
				{
					var characteristics = JsonConvert.DeserializeObject<List<CharacteristicForm>>(tour.Characteristics);
					var routes = JsonConvert.DeserializeObject<List<RouteForm>>(tour.Routes);

					List<int> characteristicIds = characteristics.Select(hc => hc.Id).ToList();
					ICollection<TourCharacteristic> tourCharacteristics = await db.TourCharacteristics
						   .Where(tc => characteristicIds.Contains(tc.Id))
						   .ToListAsync();
					
					
					Tour newTour = new Tour()
					{
						Name = tour.Name,
						MainDescription = tour.MainDescription,
						HotelId = tour.HotelId,
						TourTypeId = tour.TourTypeId,
						Characteristics = tourCharacteristics
					};

					await db.Tours.AddAsync(newTour);
					await db.SaveChangesAsync();

					

					await db.Routes.AddRangeAsync(createNewRoutes(tour));
					await db.SaveChangesAsync();
					
					addPhoto(tour)

					await transaction.CommitAsync();
					return Ok();
				}
				catch
				{
					await transaction.RollbackAsync();
					return BadRequest();
				}
			}
		}

		return BadRequest();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}





	public async Task<IActionResult> EditTour([FromForm] TourForm tour)
	{
		try
		{
			if (tour.Id == 0) return BadRequest("Invalid tour ID.");

			using (var transaction = await db.Database.BeginTransactionAsync())
			{
				try
				{
					Tour editedTour = await db.Tours.FirstOrDefaultAsync(t => t.Id == tour.Id);

					if (editedTour == null) return NotFound();

					var characteristics = JsonConvert.DeserializeObject<List<CharacteristicForm>>(tour.Characteristics);
					var routes = JsonConvert.DeserializeObject<List<RouteForm>>(tour.Routes);

					List<int> characteristicIds = characteristics.Select(hc => hc.Id).ToList();
					ICollection<TourCharacteristic> tourCharacteristics = await db.TourCharacteristics
						   .Where(tc => characteristicIds.Contains(tc.Id))
						   .ToListAsync();

					db.Database.ExecuteSqlRaw("DELETE FROM TourDescriptions WHERE TourID = {0}", tour.Id);
					editedTour.Name = tour.Name;
					editedTour.MainDescription = tour.MainDescription;
					editedTour.HotelId = tour.HotelId;
					editedTour.TourTypeId = tour.TourTypeId;
					editedTour.Characteristics = tourCharacteristics;

					ChangeRoutes(tour);
					ChangePhotoes(tour);

				await transaction.CommitAsync();
				return Ok();
			}
			catch (Exception ex)
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}







public async Task<IActionResult> DeleteTour([FromQuery] int? tourId)
{
	try
	{
		using (var transaction = await db.Database.BeginTransactionAsync())
		{
			try
			{
				List<Route> removedRoutes = await db.Routes.Where(r => r.TourId == tourId).ToListAsync();

				foreach (Route route in removedRoutes)
				{
					Booking removedBooking = await db.Bookings.FirstOrDefaultAsync(b => b.RouteId == route.Id);
					if (removedBooking != null) db.Bookings.Remove(removedBooking);
				}
				await db.SaveChangesAsync();

				db.Routes.RemoveRange(removedRoutes);
				await db.SaveChangesAsync();

				Tour removedTour = await db.Tours.FirstOrDefaultAsync(t => t.Id == tourId);
				if (removedTour == null) return NotFound();

				db.Tours.Remove(removedTour);
				await db.SaveChangesAsync();

				await transaction.CommitAsync();
				return Ok();
			}
			catch
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}





public async Task<IActionResult> AddHotel([FromForm] HotelForm hotel)
{
	try
	{
		if (hotel.Id == 0)
		{
			using (var transaction = await db.Database.BeginTransactionAsync())
			{
				try
				{

					List<CharacteristicForm> characteristics = null;
					List<RoomTypeForm> roomTypes = null;

					try
					{
						characteristics = JsonConvert.DeserializeObject<List<CharacteristicForm>>(hotel.Characteristics);
						roomTypes = JsonConvert.DeserializeObject<List<RoomTypeForm>>(hotel.RoomTypes);
					}
					catch { }

					List<int> characteristicIds = characteristics.Select(hc => hc.Id).ToList();
					ICollection<HotelCharacteristic> hotelCharacteristics = await db.HotelCharacteristics
						   .Where(hc => characteristicIds.Contains(hc.Id))
						   .ToListAsync();

					Hotel newHotel = new Hotel()ж


					await db.Hotels.AddAsync(newHotel);
					await db.SaveChangesAsync();

					var newRoomTypes = roomTypes
						.Select(rt => new RoomType()
						{
							Name = rt.Name,
							SeatsNumber = rt.SeatsNumber,
							RoomsNumber = rt.RoomsNumber,
							Price = rt.Price,
							HotelId = newHotel.Id
						})
						.ToList();

					await db.RoomTypes.AddRangeAsync(newRoomTypes);
					await db.SaveChangesAsync(); // Сохраняем, чтобы получить ID новых записей

					foreach (var newRoomType in newRoomTypes)
					{
						var rt = roomTypes.FirstOrDefault(r => r.Name == newRoomType.Name);
						if (rt != null && rt.Characteristics != null && rt.Characteristics.Any())
						{
							newRoomType.Characteristics = await db.RoomTypeCharacteristics
								.Where(rtc => rt.Characteristics.Select(c => c.Id).Contains(rtc.Id))
								.ToListAsync();
						}
					}

					await db.SaveChangesAsync();

					if (hotel.PhotosFiles != null && hotel.PhotosFiles.Count > 0)
					{
						string uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "hotels", hotel.Name);
						if (!Directory.Exists(uploadsFolder))
						{
							Directory.CreateDirectory(uploadsFolder);
						}

						List<string> savedFilePaths = new List<string>();

						int i = 0;
						foreach (var file in hotel.PhotosFiles)
						{
							if (file.Length > 0)
							{
								string uniqueFileName = $"{i++}.jpg";
								string filePath = Path.Combine(uploadsFolder, uniqueFileName);

								using (var fileStream = new FileStream(filePath, FileMode.Create))
								{
									await file.CopyToAsync(fileStream);
								}

								savedFilePaths.Add($"/uploads/hotels/{hotel.Name}/{uniqueFileName}");
							}
						}

					}

					await transaction.CommitAsync();
					return Ok();
				}
				catch
				{
					await transaction.RollbackAsync();
					return BadRequest();
				}
			}
		}

		return BadRequest();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}


public async Task<IActionResult> EditHotel([FromForm] HotelForm hotel)
{
	try
	{
		if (hotel.Id == 0) return BadRequest("Invalid hotel ID.");

		using (var transaction = await db.Database.BeginTransactionAsync())
		{
			try
			{
				Hotel editedHotel = await db.Hotels.FirstOrDefaultAsync(h => h.Id == hotel.Id);
				if (editedHotel == null) return NotFound();

				// Десериализация характеристик и типов номеров
				var characteristics = JsonConvert.DeserializeObject<List<CharacteristicForm>>(hotel.Characteristics);
				var roomTypes = JsonConvert.DeserializeObject<List<RoomTypeForm>>(hotel.RoomTypes);

				// Получение характеристик за один запрос
				var hotelCharacteristics = await db.HotelCharacteristics
					.Where(hc => characteristics.Select(c => c.Id).Contains(hc.Id))
					.ToListAsync();

				// Обновление данных отеля
				db.Database.ExecuteSqlRaw("DELETE FROM HotelDescriptions WHERE HotelID = {0}", hotel.Id);
				editedHotel.Name = hotel.Name;
				editedHotel.MainDescription = hotel.MainDescription;
				editedHotel.CityId = hotel.CityId;
				editedHotel.Address = hotel.Address;
				editedHotel.Lat = (double)hotel.Lat;
				editedHotel.Lng = (double)hotel.Lng;
				editedHotel.StarsNumber = hotel.StarsNumber;
				editedHotel.NutritionTypeId = hotel.NutritionTypeId;
				//editedHotel.PhotosDirectory = hotel.Name;
				editedHotel.Characteristics = hotelCharacteristics;

				await db.SaveChangesAsync();


				await transaction.CommitAsync();
				return Ok();
			}
			catch (Exception ex)
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}







public async Task<IActionResult> DeleteHotel([FromQuery] int? hotelId)
{
	try
	{
		using (var transaction = await db.Database.BeginTransactionAsync())
		{
			try
			{
				Hotel deletedHotel = await db.Hotels.Include(h => h.RoomTypes).FirstOrDefaultAsync(h => h.Id == hotelId);
				if (deletedHotel == null) return NotFound();

				foreach (RoomType roomType in deletedHotel.RoomTypes)
				{
					db.Database.ExecuteSqlRaw("DELETE FROM RoomTypeDescriptions WHERE RoomTypeID = {0}", roomType.Id);
				}

				db.Database.ExecuteSqlRaw("DELETE FROM HotelDescriptions WHERE HotelID = {0}", hotelId);

				db.Hotels.Remove(deletedHotel);
				await db.SaveChangesAsync();
				await transaction.CommitAsync();

				return Ok();
			}
			catch
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}







public async Task<IActionResult> AddDepartmentDeparture([FromForm] DepartmentDepartureForm departmentDeparture)
{
	try
	{
		if (departmentDeparture.Id != 0) return BadRequest("Invalid hotel ID.");

		using (var transaction = await db.Database.BeginTransactionAsync())
		{
			try
			{
				DepartmentDeparture newDepartmentDeparture = new DepartmentDeparture()
				{
					Name = departmentDeparture.Name,
					TransportTypeId = departmentDeparture.TransportTypeId,
					CityId = departmentDeparture.CityId,
					Address = departmentDeparture.Address,
					Lat = (double)departmentDeparture.Lat,
					Lng = (double)departmentDeparture.Lng,
				};


				await db.DepartmentDepartures.AddAsync(newDepartmentDeparture);
				await db.SaveChangesAsync();

				await transaction.CommitAsync();
				return Ok();
			}
			catch
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}


public async Task<IActionResult> EditDepartmentDeparture([FromForm] DepartmentDepartureForm departmentDeparture)
{
	try
	{
		if (departmentDeparture.Id == 0) return BadRequest("Invalid hotel ID.");

		using (var transaction = await db.Database.BeginTransactionAsync())
		{
			try
			{
				DepartmentDeparture editedDepartmentDeparture = await db.DepartmentDepartures.FirstOrDefaultAsync(dd => dd.Id == departmentDeparture.Id);
				if (editedDepartmentDeparture == null) return NotFound();

				editedDepartmentDeparture.Name = departmentDeparture.Name;
				editedDepartmentDeparture.CityId = departmentDeparture.CityId;
				editedDepartmentDeparture.Address = departmentDeparture.Address;
				editedDepartmentDeparture.TransportTypeId = departmentDeparture.TransportTypeId;
				editedDepartmentDeparture.Lat = (double)departmentDeparture.Lat;
				editedDepartmentDeparture.Lng = (double)departmentDeparture.Lng;

				await db.SaveChangesAsync();
				await transaction.CommitAsync();

				return Ok();
			}
			catch (Exception ex)
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}


public async Task<IActionResult> DeleteDepartmentDeparture([FromQuery] int? departmentDepartureId)
{
	try
	{
		using (var transaction = await db.Database.BeginTransactionAsync())
		{
			try
			{
				DepartmentDeparture removedDepartmentDeparture = await db.DepartmentDepartures.FirstOrDefaultAsync(dd => dd.Id == departmentDepartureId);
				if (removedDepartmentDeparture == null) return NotFound();

				db.DepartmentDepartures.Remove(removedDepartmentDeparture);
				await db.SaveChangesAsync();
				await transaction.CommitAsync();

				return Ok();
			}
			catch
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}



public async Task<IActionResult> AddCountry([FromForm] CountryForm country)
{
	try
	{
		if (country.Id == 0)
		{
			using (var transaction = await db.Database.BeginTransactionAsync())
			{
				try
				{
					List<CityForm> cities = null;

					try
					{
						cities = JsonConvert.DeserializeObject<List<CityForm>>(country.Cities);
					}
					catch { }

					

					Country newCountry = new Country()
					{
						Name = country.Name,
						MainDescription = country.MainDescription,
						Lng = (double)country.Lng,
						Lat = (double)country.Lat,
						RegionId = country.RegionId,
						LevelOfDevelopment = country.LevelOfDevelopment,
					};
					await db.Countries.AddAsync(newCountry);
					await db.SaveChangesAsync();

					if (country.PhotoFile != null)
					{
						string uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "img", "flags");
						if (!Directory.Exists(uploadsFolder)) Directory.CreateDirectory(uploadsFolder);

						if (country.PhotoFile.Length > 0)
						{
							string filePath = Path.Combine(uploadsFolder, $"{newCountry.Id}.svg");
							using var fileStream = new FileStream(filePath, FileMode.Create);
							await country.PhotoFile.CopyToAsync(fileStream);
							newCountry.PathToFlag = $"/img/flags/{newCountry.Id}.svg";
						}
					}
					await db.SaveChangesAsync();

					var newCities = cities
						.Select(c => new City()
						{
							Name = c.Name,
							MainDescription = c.MainDescription,
							Lng = (double)c.Lng,
							Lat = (double)c.Lat,
							ClimateId = c.ClimateId,
							CountryId = newCountry.Id,
							Landmarks = c.Landmarks.Select(l => new Landmark
							{
								Name = l.Name
							}).ToList()
						}).ToList();

					await db.Cities.AddRangeAsync(newCities);
					await db.SaveChangesAsync(); 

					await transaction.CommitAsync();
					return Ok();
				}
				catch
				{
					await transaction.RollbackAsync();
					return BadRequest();
				}
			}
		}

		return BadRequest();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}





public async Task<IActionResult> EditCountry([FromForm] CountryForm country)
{
	try
	{
		if (country.Id != 0)
		{
			using (var transaction = await db.Database.BeginTransactionAsync())
			{
				try
				{
					Country editedCountry = await db.Countries.FirstOrDefaultAsync(c => c.Id == country.Id);
					if (editedCountry == null) return NotFound();

					editedCountry.Name = country.Name;
					editedCountry.MainDescription = country.MainDescription;
					editedCountry.RegionId = country.RegionId;
					editedCountry.Lat = (double)country.Lat;
					editedCountry.Lng = (double)country.Lng;
					editedCountry.LevelOfDevelopment = country.LevelOfDevelopment;

					if (country.PhotoFile != null)
					{
						string uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "img", "flags");
						if (!Directory.Exists(uploadsFolder)) Directory.CreateDirectory(uploadsFolder);

						if (country.PhotoFile.Length > 0)
						{
							string filePath = Path.Combine(uploadsFolder, $"{country.Id}.svg");
							using var fileStream = new FileStream(filePath, FileMode.Create);
							await country.PhotoFile.CopyToAsync(fileStream);
							editedCountry.PathToFlag = $"/img/flags/{country.Id}.svg";
						}
					}

					await db.SaveChangesAsync();
					await transaction.CommitAsync();
					return Ok();
				}
				catch
				{
					await transaction.RollbackAsync();
					return BadRequest();
				}
			}
		}

		return BadRequest();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}



public async Task<IActionResult> DeleteCountry([FromQuery] int? countryId)
{
	try
	{
		using (var transaction = await db.Database.BeginTransactionAsync())
		{
			try
			{
				Country deletedCountry = await db.Countries.FirstOrDefaultAsync(t => t.Id == countryId);
				if (deletedCountry == null) return NotFound();

				db.Countries.Remove(deletedCountry);
				await db.SaveChangesAsync();

				await transaction.CommitAsync();
				return Ok();
			}
			catch
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}





public async Task<IActionResult> ChangePrice([FromQuery]int price, [FromQuery] int? bookingId)
{
	try
	{
		using (var transaction = await db.Database.BeginTransactionAsync())
		{
			try
			{
				Booking editedBooking = await db.Bookings.FirstOrDefaultAsync(b => b.Id == bookingId);

				if (editedBooking == null) return NotFound();
				editedBooking.Price = price;
				
				await db.SaveChangesAsync();

				await transaction.CommitAsync();
				return Ok();
			}
			catch (Exception ex)
			{
				await transaction.RollbackAsync();
				return BadRequest();
			}
		}
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}








public async Task<IActionResult> DeleteReview([FromQuery] int? tourId)
{
	try
	{
		Review deletedReview = await db.Reviews.FirstOrDefaultAsync(r => r.Id == tourId);
		if (deletedReview == null) return NotFound();

		db.Remove(deletedReview);
		await db.SaveChangesAsync();
		return Ok();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}






public async Task<IActionResult> ChangeRole([FromQuery] int? userId, [FromQuery] UserRole? roleId)
{
	try
	{
		User editedUser = await db.Users.FirstOrDefaultAsync(u => u.Id == userId);
		if (editedUser == null) return NotFound();

		editedUser.Role = (UserRole)roleId;
		await db.SaveChangesAsync();
		return Ok();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}







public async Task<IActionResult> BlockUser([FromQuery] int? userId)
{
	try
	{
		User blockedUser = await db.Users.FirstOrDefaultAsync(u => u.Id == userId);
		if (blockedUser == null) return NotFound();

		blockedUser.BlockedStatus = !blockedUser.BlockedStatus;
		await db.SaveChangesAsync();
		return Ok();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}






public async Task<IActionResult> DeleteUser([FromQuery] int? userId)
{
	try
	{
		User removedUser = await db.Users.FirstOrDefaultAsync(u => u.Id == userId);
		if (removedUser == null) return NotFound();

		string uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "users");
		if (System.IO.File.Exists(uploadsFolder + $"\\{userId}.png")) System.IO.File.Delete(uploadsFolder + $"\\{userId}.png");
	

		db.Users.Remove(removedUser);
		await db.SaveChangesAsync();
		return Ok();
	}
	catch (Exception ex)
	{
		return BadRequest(ex.Message);
	}
}

ВВЕДЕНИЕ
Про подбор и географию у ИИ спросить
Кароч, про цель тоже у ИИ спросить




